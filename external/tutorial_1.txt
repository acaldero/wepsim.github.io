[
  {
    "mode": "ep",
    "firmware": "begin\n{\n                    # if (INT) go mrti\n                    (A0=0, B=0, C=1, MADDR=mrti),\n\n    fetch:          (T2, C0),\n                    (TA, R, BW=11, M1=1, C1=1),\n                    (M2, C2, T1, C3),\n                    (A0, B=0, C=0),\n\n    mrti:           # MBR <- DB <- INTV\n                    (INTA, BW=11, M1=1, C1=1),\n                    # RT1 <- MBR\n                    (T1=1, C4=1),\n\n    csw_rt1:        # push PC\n                    (MR=1, SELA=11101, MA=0, MB=10, MC=1, SELCOP=1011, T6=1, SELC=11101, LC=1, C0),\n                    (T2=1, M1=0, C1),\n                    (BW=11, TA=1, TD=1, W=1)\n                    # push SR\n                    (MR=1, SELA=11101, MA=0, MB=10, MC=1, SELCOP=1011, T6=1, SELC=11101, LC=1, C0),\n                    (T8=1, M1=0, C1),\n                    (BW=11, TA=1, TD=1, W=1),\n                    # MAR <- RT1*4\n                    (MA=1, MB=10, MC=1, SELCOP=1100, T6, M2=0, C0),\n                    # MBR <- MP[MAR]\n                    (TA=1, R=1, BW=11, M1=1, C1=1),\n                    # PC <- MAR\n                    (T1, M2=0, C2),\n                    # go fetch\n                    (A0=0, B=1, C=0, MADDR=fetch)\n}\n\n\n#\n# INT\n#\n\nreti {\n        co=111110,\n        nwords=1,\n        {\n              # pop SR\n              (MR=1, SELA=11101, T9, C0),\n              (MR=1, SELA=11101, MA=0, MB=10, MC=1, SELCOP=1010, T6=1, SELC=11101, LC=1),\n              (TA=1, R=1, BW=11, M1=1, C1),\n              (T1=1, M7=0, C7),\n              # pop PC\n              (MR=1, SELA=11101, T9, C0),\n              (MR=1, SELA=11101, MA=0, MB=10, MC=1, SELCOP=1010, T6=1, SELC=11101, LC=1),\n              (TA=1, R=1, BW=11, M1=1, C1),\n              (T1=1, M2=0, C2, A0=1, B=1 ,C=0)\n        }\n}\n\nsyscall {\n        co=101110,\n        nwords=1,\n        {\n                    # RT1 <- ExCode=2\n                    (ExCode=10, T11, C4),\n                    # csw_rt1(2)\n                    (A0=0, B=1, C=0, MADDR=csw_rt1)\n        }\n}\n\n\n#\n# ALU\n#\n\nand reg1 reg2 reg3 {\n            co=000000,\n            cop=0000,\n            nwords=1,\n            reg1=reg(25,21),\n            reg2=reg(20,16),\n            reg3=reg(15,11),\n            {\n                (MC=1, MR=0, SELA=1011, SELB=10000, MA=0, MB=0, SELCOP=1, T6=1, SELC=10101, LC=1, SELP=11, M7, C7, A0=1, B=1, C=0)\n            }\n}\n\nor reg1 reg2 reg3 {\n            co=000000,\n            cop=0001,\n            nwords=1,\n            reg1=reg(25,21),\n            reg2=reg(20,16),\n            reg3=reg(15,11),\n            {\n                (MC=1, MR=0, SELA=1011, SELB=10000, MA=0, MB=0, SELCOP=10, T6=1, SELC=10101, LC=1, SELP=11, M7, C7, A0=1, B=1, C=0)\n            }\n}\n\nnot reg {\n            co=000000,\n            cop=0010,\n            nwords=1,\n            reg=reg(25,21),\n            {\n                (MC=1, MR=0, SELA=10101, MA=0, SELCOP=11, T6=1, SELC=10101, LC=1, SELP=11, M7, C7, A0=1, B=1, C=0)\n            }\n}\n\nxor reg1 reg2 reg3 {\n            co=000000,\n            cop=0011,\n            nwords=1,\n            reg1=reg(25,21),\n            reg2=reg(20,16),\n            reg3=reg(15,11),\n            {\n                (MC=1, MR=0, SELA=1011, SELB=10000, MA=0, MB=0, SELCOP=100, T6=1, SELC=10101, LC=1, SELP=11, M7, C7, A0=1, B=1, C=0)\n            }\n}\n\nadd reg1 reg2 reg3 {\n            co=000000,\n            cop=1001,\n            nwords=1,\n            reg1=reg(25,21),\n            reg2=reg(20,16),\n            reg3=reg(15,11),\n            {\n                (MC=1, MR=0, SELA=1011, SELB=10000, MA=0, MB=0, SELCOP=1010, T6=1, SELC=10101, LC=1, SELP=11, M7, C7, A0=1, B=1, C=0)\n            }\n}\n\nsub reg1 reg2 reg3 {\n            co=000000,\n            cop=1010,\n            nwords=1,\n            reg1=reg(25,21),\n            reg2=reg(20,16),\n            reg3=reg(15,11),\n            {\n                (MC=1, MR=0, SELB=1011, SELA=10000, MA=0, MB=0, SELCOP=1011, T6=1, SELC=10101, LC=1, SELP=11, M7, C7, A0=1, B=1, C=0)\n            }\n}\n\nmul reg1 reg2
    "assembly": "\n#\n# WepSIM (https://wepsim.github.io/wepsim/)\n#\n\n.kdata\n   vector:  .word rt_i0\n            .word rt_div0\n            .word rt_sys\n\n   msgi0:   .asciiz \"INT: 0\\n\"\n   msgi1:   .asciiz \"FPE: */0\\n\"\n\n.ktext\nsys_print:  li   $0 0\n            li   $1 1\n            beq  $26 $0 fin1\n        b5: lb   $27 ($26)\n            beq  $27 $0 fin1\n            out  $27 0x1000\n            add  $26 $26 $1\n            b  b5\n      fin1: reti\n\n  rt_i0:    # 1.- interruption\n            la   $26 msgi0\n            b    sys_print\n\n  rt_div0:  # 2.- exception\n            la   $26 msgi1\n            b    sys_print\n\n  rt_sys:   # 3.- syscall\n            move $26 $a0\n            li   $27 4\n            beq  $v0 $27 sys_print\n            reti \n\n\n.data\n    helloworld: .asciiz \"hello world...\\n\"\n\n.text\n    main:  # test syscall\n           la  $a0 helloworld\n           li  $v0 4\n           syscall\n\n           # test div 0/0\n           li  $t0 0\n           li  $t1 0\n           div $t1 $t1 $t0\n\n           # test int0\n           li  $t0 0\n           out $t0 0x1104\n           li  $t0 900\n           out $t0 0x1108\n\n           li  $t0 0\n           li  $t1 1\n           li  $t2 100\n       b1: beq $t0 $t2 e1\n           add $t0 $t0 $t1\n           b b1\n\n       e1: li  $t0 0\n           out $t0 0x1104\n           out $t0 0x1108\n\n           # the end\n           jr $ra\n\n",
    "state": {
      "time": 1555339154372,
      "title": "clock 1 @ &#181;address 0",
      "title_short": "clock 1,<br>&#181;add 0",
      "content": "register R29 = 0xffff; register PC = 0x8000; memory 0x0 = 0x124; memory 0x4 = 0x12c; memory 0x8 = 0x134; memory 0xc = 0x3a544e49; memory 0x10 = 0xa3020; memory 0x14 = 0x3a455046; memory 0x18 = 0x302f2a20; memory 0x1c = 0xa; memory 0x100 = 0x8000000; memory 0x104 = 0x8200001; memory 0x108 = 0x37400014; memory 0x10c = 0x977a0000; memory 0x110 = 0x3760000c; memory 0x114 = 0x2f601000; memory 0x118 = 0x35a0809; memory 0x11c = 0x3000ffec; memory 0x120 = 0xf8000000; memory 0x124 = 0xf40000c; memory 0x128 = 0x3000ffd4; memory 0x12c = 0xf400014; memory 0x130 = 0x3000ffcc; memory 0x134 = 0x7440000; memory 0x138 = 0xb600004; memory 0x13c = 0x345bffc0; memory 0x140 = 0xf8000000; memory 0x1000 = 0x6c6c6568; memory 0x1004 = 0x6f77206f; memory 0x1008 = 0x2e646c72; memory 0x100c = 0xa2e2e; memory 0x8000 = 0xc801000; memory 0x8004 = 0x8400004; memory 0x8008 = 0xb8000000; memory 0x800c = 0x9000000; memory 0x8010 = 0x9200000; memory 0x8014 = 0x129400c; memory 0x8018 = 0x9000000; memory 0x801c = 0x2d001104; memory 0x8020 = 0x9000384; memory 0x8024 = 0x2d001108; memory 0x8028 = 0x9000000; memory 0x802c = 0x9200001; memory 0x8030 = 0x9400064; memory 0x8034 = 0x350a0008; memory 0x8038 = 0x1084809; memory 0x803c = 0x3000fff4; memory 0x8040 = 0x9000000; memory 0x8044 = 0x2d001104; memory 0x8048 = 0x2d001108; memory 0x804c = 0x57e00000; "
    },
    "tag": "2 (Step 1)",
    "notify": false
  },
  {
    "mode": "ep",
    "firmware": "begin\n{\n                    # if (INT) go mrti\n                    (A0=0, B=0, C=1, MADDR=mrti),\n\n    fetch:          (T2, C0),\n                    (TA, R, BW=11, M1=1, C1=1),\n                    (M2, C2, T1, C3),\n                    (A0, B=0, C=0),\n\n    mrti:           # MBR <- DB <- INTV\n                    (INTA, BW=11, M1=1, C1=1),\n                    # RT1 <- MBR\n                    (T1=1, C4=1),\n\n    csw_rt1:        # push PC\n                    (MR=1, SELA=11101, MA=0, MB=10, MC=1, SELCOP=1011, T6=1, SELC=11101, LC=1, C0),\n                    (T2=1, M1=0, C1),\n                    (BW=11, TA=1, TD=1, W=1)\n                    # push SR\n                    (MR=1, SELA=11101, MA=0, MB=10, MC=1, SELCOP=1011, T6=1, SELC=11101, LC=1, C0),\n                    (T8=1, M1=0, C1),\n                    (BW=11, TA=1, TD=1, W=1),\n                    # MAR <- RT1*4\n                    (MA=1, MB=10, MC=1, SELCOP=1100, T6, M2=0, C0),\n                    # MBR <- MP[MAR]\n                    (TA=1, R=1, BW=11, M1=1, C1=1),\n                    # PC <- MAR\n                    (T1, M2=0, C2),\n                    # go fetch\n                    (A0=0, B=1, C=0, MADDR=fetch)\n}\n\n\n#\n# INT\n#\n\nreti {\n        co=111110,\n        nwords=1,\n        {\n              # pop SR\n              (MR=1, SELA=11101, T9, C0),\n              (MR=1, SELA=11101, MA=0, MB=10, MC=1, SELCOP=1010, T6=1, SELC=11101, LC=1),\n              (TA=1, R=1, BW=11, M1=1, C1),\n              (T1=1, M7=0, C7),\n              # pop PC\n              (MR=1, SELA=11101, T9, C0),\n              (MR=1, SELA=11101, MA=0, MB=10, MC=1, SELCOP=1010, T6=1, SELC=11101, LC=1),\n              (TA=1, R=1, BW=11, M1=1, C1),\n              (T1=1, M2=0, C2, A0=1, B=1 ,C=0)\n        }\n}\n\nsyscall {\n        co=101110,\n        nwords=1,\n        {\n                    # RT1 <- ExCode=2\n                    (ExCode=10, T11, C4),\n                    # csw_rt1(2)\n                    (A0=0, B=1, C=0, MADDR=csw_rt1)\n        }\n}\n\n\n#\n# ALU\n#\n\nand reg1 reg2 reg3 {\n            co=000000,\n            cop=0000,\n            nwords=1,\n            reg1=reg(25,21),\n            reg2=reg(20,16),\n            reg3=reg(15,11),\n            {\n                (MC=1, MR=0, SELA=1011, SELB=10000, MA=0, MB=0, SELCOP=1, T6=1, SELC=10101, LC=1, SELP=11, M7, C7, A0=1, B=1, C=0)\n            }\n}\n\nor reg1 reg2 reg3 {\n            co=000000,\n            cop=0001,\n            nwords=1,\n            reg1=reg(25,21),\n            reg2=reg(20,16),\n            reg3=reg(15,11),\n            {\n                (MC=1, MR=0, SELA=1011, SELB=10000, MA=0, MB=0, SELCOP=10, T6=1, SELC=10101, LC=1, SELP=11, M7, C7, A0=1, B=1, C=0)\n            }\n}\n\nnot reg {\n            co=000000,\n            cop=0010,\n            nwords=1,\n            reg=reg(25,21),\n            {\n                (MC=1, MR=0, SELA=10101, MA=0, SELCOP=11, T6=1, SELC=10101, LC=1, SELP=11, M7, C7, A0=1, B=1, C=0)\n            }\n}\n\nxor reg1 reg2 reg3 {\n            co=000000,\n            cop=0011,\n            nwords=1,\n            reg1=reg(25,21),\n            reg2=reg(20,16),\n            reg3=reg(15,11),\n            {\n                (MC=1, MR=0, SELA=1011, SELB=10000, MA=0, MB=0, SELCOP=100, T6=1, SELC=10101, LC=1, SELP=11, M7, C7, A0=1, B=1, C=0)\n            }\n}\n\nadd reg1 reg2 reg3 {\n            co=000000,\n            cop=1001,\n            nwords=1,\n            reg1=reg(25,21),\n            reg2=reg(20,16),\n            reg3=reg(15,11),\n            {\n                (MC=1, MR=0, SELA=1011, SELB=10000, MA=0, MB=0, SELCOP=1010, T6=1, SELC=10101, LC=1, SELP=11, M7, C7, A0=1, B=1, C=0)\n            }\n}\n\nsub reg1 reg2 reg3 {\n            co=000000,\n            cop=1010,\n            nwords=1,\n            reg1=reg(25,21),\n            reg2=reg(20,16),\n            reg3=reg(15,11),\n            {\n                (MC=1, MR=0, SELB=1011, SELA=10000, MA=0, MB=0, SELCOP=1011, T6=1, SELC=10101, LC=1, SELP=11, M7, C7, A0=1, B=1, C=0)\n            }\n}\n\nmul reg1 reg2
    "assembly": "\n#\n# WepSIM (https://wepsim.github.io/wepsim/)\n#\n\n.kdata\n   vector:  .word rt_i0\n            .word rt_div0\n            .word rt_sys\n\n   msgi0:   .asciiz \"INT: 0\\n\"\n   msgi1:   .asciiz \"FPE: */0\\n\"\n\n.ktext\nsys_print:  li   $0 0\n            li   $1 1\n            beq  $26 $0 fin1\n        b5: lb   $27 ($26)\n            beq  $27 $0 fin1\n            out  $27 0x1000\n            add  $26 $26 $1\n            b  b5\n      fin1: reti\n\n  rt_i0:    # 1.- interruption\n            la   $26 msgi0\n            b    sys_print\n\n  rt_div0:  # 2.- exception\n            la   $26 msgi1\n            b    sys_print\n\n  rt_sys:   # 3.- syscall\n            move $26 $a0\n            li   $27 4\n            beq  $v0 $27 sys_print\n            reti \n\n\n.data\n    helloworld: .asciiz \"hello world...\\n\"\n\n.text\n    main:  # test syscall\n           la  $a0 helloworld\n           li  $v0 4\n           syscall\n\n           # test div 0/0\n           li  $t0 0\n           li  $t1 0\n           div $t1 $t1 $t0\n\n           # test int0\n           li  $t0 0\n           out $t0 0x1104\n           li  $t0 900\n           out $t0 0x1108\n\n           li  $t0 0\n           li  $t1 1\n           li  $t2 100\n       b1: beq $t0 $t2 e1\n           add $t0 $t0 $t1\n           b b1\n\n       e1: li  $t0 0\n           out $t0 0x1104\n           out $t0 0x1108\n\n           # the end\n           jr $ra\n\n",
    "state": {
      "time": 1555339163187,
      "title": "clock 107 @ &#181;address 0",
      "title_short": "clock 107,<br>&#181;add 0",
      "content": "register R1 = 0x1; register R2 = 0x4; register R4 = 0x1000; register R26 = 0x1001; register R27 = 0x68; register R29 = 0xfff7; register PC = 0x11c; memory 0x0 = 0x124; memory 0x4 = 0x12c; memory 0x8 = 0x134; memory 0xc = 0x3a544e49; memory 0x10 = 0xa3020; memory 0x14 = 0x3a455046; memory 0x18 = 0x302f2a20; memory 0x1c = 0xa; memory 0x100 = 0x8000000; memory 0x104 = 0x8200001; memory 0x108 = 0x37400014; memory 0x10c = 0x977a0000; memory 0x110 = 0x3760000c; memory 0x114 = 0x2f601000; memory 0x118 = 0x35a0809; memory 0x11c = 0x3000ffec; memory 0x120 = 0xf8000000; memory 0x124 = 0xf40000c; memory 0x128 = 0x3000ffd4; memory 0x12c = 0xf400014; memory 0x130 = 0x3000ffcc; memory 0x134 = 0x7440000; memory 0x138 = 0xb600004; memory 0x13c = 0x345bffc0; memory 0x140 = 0xf8000000; memory 0x1000 = 0x6c6c6568; memory 0x1004 = 0x6f77206f; memory 0x1008 = 0x2e646c72; memory 0x100c = 0xa2e2e; memory 0x8000 = 0xc801000; memory 0x8004 = 0x8400004; memory 0x8008 = 0xb8000000; memory 0x800c = 0x9000000; memory 0x8010 = 0x9200000; memory 0x8014 = 0x129400c; memory 0x8018 = 0x9000000; memory 0x801c = 0x2d001104; memory 0x8020 = 0x9000384; memory 0x8024 = 0x2d001108; memory 0x8028 = 0x9000000; memory 0x802c = 0x9200001; memory 0x8030 = 0x9400064; memory 0x8034 = 0x350a0008; memory 0x8038 = 0x1084809; memory 0x803c = 0x3000fff4; memory 0x8040 = 0x9000000; memory 0x8044 = 0x2d001104; memory 0x8048 = 0x2d001108; memory 0x804c = 0x57e00000; memory 0xfff8 = 0x800c; screen 0 == h; "
    },
    "tag": "2 (Step 2)",
    "notify": false
  }
]
